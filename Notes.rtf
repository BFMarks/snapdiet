{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 SFMono-Regular;
}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red21\green23\blue26;
\red10\green77\blue204;\red244\green246\blue249;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c10588\c12157\c13725\c4706;
\cssrgb\c1176\c40000\c83922;\cssrgb\c96471\c97255\c98039;\csgray\c100000;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
To Do\
\
Table View Tracker:\
-\uc0\u8730 Organize by dates\
\uc0\u8730 -Distinguish between good bad and ok days\
-\uc0\u8730  add calorie tracking\
-Add daily calories / fat / protein\
- Fix button (make camera button pretty)\
- Create View when there's no user data\
\
Main View:\
-\uc0\u8730  Add Info button\
-\uc0\u8730  Add plus button\
\
Pre-MVP\
Main View:\
- Add second option button\
- Clean UI\
- Add More Options at Info\
-Check Views on different size devices\
\
Onboarding:\
- Basic Design\
- Add Last Page\
\
Info\
- Add The foods it can track\
- Add submission button\
\
Quick Add\
- Maybe Add backend Quick Add Ability\
\
Tracker:\
Add different views\
\
\
Login:\
- \uc0\u8730 Create Onboarding flow! (weight, goals, etc...)\
-(v2) add google\
- \uc0\u8730 determine Unique FB issue (user create)\
- \uc0\u8730 Add a Confirm you've logged in or are logged in\
\
(v2) TF Model: \
- determine most common foods for your target demographic\
- Determine faster training method\
- determine why folders aren't working\
\
(v2) Confirm View:\
- Add slider and icons\
\
\
Notes on retraining model:\
\pard\pardeftab720\sl340\sa320\partightenfactor0

\f1\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
Is this the right way to think about it?\
You've trained a model for app 1. Now you want to train a model for app 2. But it keeps using the labels (folder names) from app 1.\
It sounds like you have some old bottleneck files hanging around. Try and delete the 
\f2\fs23\fsmilli11900 \cb4 bottlenecks
\f1\fs28 \cb3 folder, and the 
\f2\fs23\fsmilli11900 \cb4 *.txt
\f1\fs28 \cb3  log files.\
Right now this is how it does the stripping. You will need to compile the stripper first, though. Check out {\field{\*\fldinst{HYPERLINK "https://github.com/tensorflow/tensorflow/issues/2883"}}{\fldrslt \cf5 this thread}}.\
\pard\pardeftab720\sl340\partightenfactor0

\f2\fs23\fsmilli11900 \cf2 \cb6 python /tensorflow/tensorflow/examples/image_retraining/retrain.py \\\
--bottleneck_dir=$TFBASE/bottlenecks \\\
--model_dir=$TFBASE/inception \\\
--output_graph=$TFBASE/model/retrained_graph.pb \\\
--output_labels=$TFBASE/model/retrained_labels.txt \\\
--image_dir $TFBASE/images/resized\
\
/tensorflow/bazel-bin/tensorflow/python/tools/strip_unused \\\
--input_graph=$TFBASE/model/retrained_graph.pb \\\
--output_graph=$TFBASE/model/retrained_graph_stripped.pb \\\
--input_node_names=Mul \\\
--output_node_names=final_result \\\
--input_binary=true\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb7 \kerning1\expnd0\expndtw0 \
}